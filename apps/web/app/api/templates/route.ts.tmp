import { getSession } from "@repo/auth";
import { db } from "@repo/database";
import { NextResponse } from "next/server";

export async function GET() {
	try {
		const session = await getSession();

		if (!session?.user) {
			return NextResponse.json(
				{ error: "Unauthorized" },
				{ status: 401 }
			);
		}

		console.log("Fetching templates for user:", session.user.id);
		const templates = await db.template.findMany({
			where: {
				userId: session.user.id,
			},
			include: {
				user: {
					select: {
						name: true,
						email: true,
					},
				},
			},
			orderBy: {
				createdAt: "desc",
			},
		});

		return NextResponse.json(templates);
	} catch (error) {
		console.error("Error fetching templates:", error);
		return NextResponse.json(
			{ error: "Error fetching templates" },
			{ status: 500 }
		);
	}
}

export async function POST(request: Request) {
	try {
		const session = await getSession();

		if (!session?.user) {
			return NextResponse.json(
				{ error: "Unauthorized" },
				{ status: 401 }
			);
		}

		const data = await request.json();

		const template = await db.template.create({
			data: {
				name: data.name,
				description: data.description,
				isActive: data.isActive,
				userId: session.user.id,
				logo_path: data.logo_path,
				logo_cover: data.logo_cover,
				color: data.color,
				font_title: data.font_title,
				font_paragraph: data.font_paragraph,
			},
		});

		return NextResponse.json(template);
	} catch (error) {
		console.error("Error creating template:", error);
		return NextResponse.json(
			{ error: "Error creating template" },
			{ status: 500 }
		);
	}
}

export async function DELETE(request: Request) {
	try {
		const session = await getSession();

		if (!session?.user) {
			return NextResponse.json(
				{ error: "Unauthorized" },
				{ status: 401 }
			);
		}

		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");

		if (!id) {
			return NextResponse.json(
				{ error: "Template ID is required" },
				{ status: 400 }
			);
		}

		await db.template.delete({
			where: {
				id: parseInt(id),
				userId: session.user.id,
			},
		});

		return NextResponse.json({ success: true });
	} catch (error) {
		console.error("Error deleting template:", error);
		return NextResponse.json(
			{ error: "Error deleting template" },
			{ status: 500 }
		);
	}
}

export async function PUT(request: Request) {
	try {
		const session = await getSession();

		if (!session?.user) {
			return NextResponse.json(
				{ error: "Unauthorized" },
				{ status: 401 }
			);
		}

		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");

		if (!id) {
			return NextResponse.json(
				{ error: "Template ID is required" },
				{ status: 400 }
			);
		}

		const data = await request.json();

		const template = await db.template.update({
			where: {
				id: parseInt(id),
				userId: session.user.id,
			},
			data: {
				name: data.name,
				description: data.description,
				isActive: data.isActive,
				logo_path: data.logo_path,
				logo_cover: data.logo_cover,
				color: data.color,
				font_title: data.font_title,
				font_paragraph: data.font_paragraph,
			},
		});

		return NextResponse.json(template);
	} catch (error) {
		console.error("Error updating template:", error);
		return NextResponse.json(
			{ error: "Error updating template" },
			{ status: 500 }
		);
	}
} 